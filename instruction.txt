Требования из методички:

---------------------------------------------------------------------------------------------
Программа должна удовлетворять следующим требованиям: 
1. Программа не должна вызывать системных сбоев или зависать. 
2. Программа должна освобождать всю выделенную память. 
3. Должны отсутствовать конструкции, приводящие к неопределённому поведению. 
4. Переменные должны быть, по возможности, локальны. Не должно быть неиспользуемых 
переменных. 
5. Алгоритмы не должны быть избыточны (нет циклов, массивов, ... без которых можно 
обойтись). 
6. Свои классы необходимо реализовывать в отдельных файлах. 
7. Необходимо отделять интерфейс от реализации.
8. Необходимо использовать STL-контейнеры и итераторы. 

При написании программы используйте стилистические соглашения: 
1. Говорящие имена классов, функций, переменных. 
2. Имена классов должны быть существительными, соответствующими, по возможности, 
понятиям предметной области. 
3. Имена классов должны начинаться с заглавной буквы. 
4. Имена атрибутов и операций должны начинаться с маленькой буквы. 
5. Составные имена должны быть сплошными, без подчёркиваний, каждое отдельное слово 
должно начинаться с заглавной буквы. 
6. Старайтесь избегать слишком длинных функций и файлов с кодом.

При использовании системы контроля версий придерживайтесь следующих правил: 
1. Не изменяйте коммиты, которые попали в публичный репозиторий. 
2. Ветвь “master” должна содержать достаточно стабильный код. По крайней мере, программа 
должна собираться и запускаться в любой момент истории ветви master. 
3. Каждый коммит должен быть логически отдельным набором изменений с ясным 
заголовком и описанием. 
4. Не отправляйте в репозиторий файлы, создаваемые при компиляции (временные файлы) 
и файлы пользовательских настроек IDE. Задействуйте файл .gitignore
----------------------------------------------------------------------------------------------

Кроме требований из методички желательно придерживаться следующих правил:
1. В документации и диаграммах UML (файлы Technical specification и transport_company) 
находится описание классов, их атрибутов, методов и связей между ними. Эти файлы можно и нужно
использовать для написания программы
2. Не трогать документацию, если возникли с ней какие-то проблемы/вопросы/предложения - 
обращаться к тимлиду
3. Если во время работы возникли какие-то временные файлы, которые были пропущены файлом 
.gitignore - внести маску этих файлов в .gitignore и оформить это изменение отдельным коммитом
4. По любым спорным вопросам - писать тимлиду

По коду:
1. Все програмные объекты должны называться по-английски английскими словами (не транслитом)
2. Вместо void в функциях лучше использовать тип возвращаемого значения uint8_t - это 
пригодится, если в последствии из функции понадобится вернуть код ошибки
3. Вместо простых целочисленных типов (short, int, long ...) использовать целочисленные типы 
(int8_t, uint8_t ...) из заголовочного файла stdint.h
4. Используем систему приставок для переменных:
	m_* - для полей классов: m_member
	p_* - для параметров функций/методов: p_parameter
	g-* - для глобальных переменых: g_global
5. Каждый класс должен сопровождаться комментарием, кратко описывающим его назначение